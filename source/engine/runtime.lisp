
(in-package :abstracttensor/engine)

(defparameter *runtime* nil
  "## [parameter] *runtime*
Set RuntimeConfig to use.")

(defstruct (RuntimeConfig
	    (:constructor make-runtime (name
					&key
					  (debug 0)
					  (indexing-rule :flatten)
					  (vectorize-strategy :disabled)
					  (simd-len -1)
					  (scoping-type :static)
					  
					  (group-for-reduces 1)
					  (upcasted 1)
					  (dont-use-locals nil))))
  "
## [struct] RuntimeConfig

RuntimeConfig declares the policy for compiling the generated UOps.

First, UOps, which begin as Lisp-written matrix operation code, are traced and optimized in a hardware-independent manner. During compilation, based on the information from this RuntimeConfig, UOps are transformed into forms specific to CPUs and GPUs, for example, allowing each runtime to generate device-specific code.

See also: `declare-runtime`

### Options

- name[keyword] the runtime name. this argument is also used for dispatching methods.
- debug[integer]
    - Specify an integer from 0..4
        - 0 ignores all warnings
        - 1 for displaying a signifcant error
        - 2 for displaying an optimization warning
        - 3 for displaying all progresses
        - 4 for displaying compiled code.
- indexing-rule[keyword]
    - Specify one of :flatten or :ndarray. (it effects on trace-uops function.)
        - :flatten for accessing the array elements with computing strides. (e.g.: A[10x + y])
        - :ndarray for ignoring computing strides. (e.g.: A[x][y])
- vectorize-strategy[keyword]
    - Declares the approach for attempting parallelization.
        - :disable to ignore the parallelization optimization process.
        - :vector  to use CPU and SIMD.
        - :scalar  to use GPU.

- simd-len[fixnum]
    - If vectorize-strategy=:vector is selected, specify here the size of simd register.

- scoping-type[keyword]
    - One of: :dynamic :static
        - :static   When generating unrolled loop and loop reminder, the compiler assumes that the target language has a static scope and performs optimisation.
        - :dynamic  the compiler assumes that the target language has a dynamic scope and generates extra codes for computing the number of remaining elements.
"
  (name name :type keyword)
  (indexing-rule indexing-rule :type (and keyword (member :flatten :ndarray)))
  (debug debug :type (integer 0 4))

  ;; Parallelization
  (vectorize-strategy vectorize-strategy :type (and keyword (member :disabled :vector :scalar)))

  ;; Configs for Vector Computor
  (simd-len simd-len :type fixnum)
  (scoping-type scoping-type :type (and keyword (member :static :dynamic)))
  ;; Configs for Scalar Computor
  (group-for-reduces group-for-reduces :type fixnum)
  (upcasted upcasted :type fixnum)
  (dont-use-locals dont-use-locals :type boolean))

(defmacro declare-runtime (runtime-id &rest args)
  "[TODO] Docs"
  `(setf *runtime* (make-runtime ,runtime-id ,@args)))

(defgeneric render-graph (backend uop-graph)
  (:documentation "[TODO] Renders the uop-graph"))

(defgeneric render-buffer (backend buffer)
  (:documentation "[TODO] Renders the buffer"))

(defgeneric load-compiled-composite (backend compiled-code composite header-object)
  (:documentation "[TODO] Loads the compiled composite"))

(defgeneric initialize-runtime (backend config)
  (:documentation "This method called once when the runtime is initialized."))

(defun make-function-name (composite shapes)
  (with-output-to-string (out)
    (let ((tensors (aten/ir:composite-inputs composite)))
      (format out "_~(~a~)_" (aten/ir:aten-type-class (car tensors))))
    (format out "~(~a~)_" (aten/ir:composite-name composite))
    (dolist (s shapes)
      (format out "~(~a~)" s))
    (format out "_~(~a~)" (gensym "ID"))))

(defun realize (uop-graph composite &key (function-name nil))
  "[TODO] Doc finish the complitaion.

- function-name[string] If set to nil, the function name is autogenerated based on the composite name, shapes, and gensym to cause no conflicts."
  (declare (type UOpGraph uop-graph))
  
  (flet ((->make-const (scalar)
	   (aten/ir::make-aten scalar :int nil nil nil)))
    (let* ((new-uop-graph (copy-UOpGraph uop-graph))
	   ;; Gathering dynamic shapes
	   (dynamic-shapes
	     (remove-duplicates
	      (loop for i in (aten/ir:composite-inputs composite)
		    append
		    (loop for s in (aten/ir:aten-shape i)
			  if (not (numberp s))
			    collect s))))
	   (function-name (or function-name (make-function-name composite dynamic-shapes)))
	   (header (aten/engine:make-uop-defun
		    :inputs
		    `(,@(aten/ir:composite-inputs composite)
		      ,@(map 'list #'->make-const dynamic-shapes))
		    :outputs (aten/ir:composite-outputs composite)
		    :named function-name)))
      (setf (UOpGraph-uops new-uop-graph)
	    `(,header
	      ,@(UOpGraph-uops new-uop-graph)
	      ,(aten/engine:make-uop-enddefun
		:named function-name)))
      (let ((compiled-code (render-graph (runtimeconfig-name *runtime*) new-uop-graph)))
	(assert (stringp compiled-code) () "realize: compiled code should be a string")
	(when (>= (runtimeconfig-debug *runtime*) 2)
	  (format t "[Compiled Code]~%")
	  (format t "~a~%" compiled-code))
	(let ((compiled-composite
		(load-compiled-composite (runtimeconfig-name *runtime*) compiled-code composite header)))
	  (assert (compiled-composite-p compiled-composite) () "realize: load-compiled-composite should return a compiled-composite object.")
	  (values compiled-composite compiled-code))))))

;; Utils
(defun infer-buffer-type (buffer)
  "Infers the type of buffer.
Return: (values type-keyword pointer-p)"
  (declare (type buffers buffer))

  (when (stringp buffer)
    (error "Cannot infer the type of ~a." buffer))

  (buffercase
   buffer
   :packed ((objs dtype)
	    (declare (ignore objs))
	    dtype)
   :const
   ((value type pointer-p)
    (declare (ignore value))
    (values type pointer-p))
   :aref
   ((name idx)
    (declare (ignore idx))
    (values (aten/ir:aten-type-class name) nil))))

(defmacro with-debug-level ((n-level) &body body)
  `(when (or
	  (null *runtime*)
	  (>= (runtimeconfig-debug *runtime*) ,n-level))
     ,@body))


